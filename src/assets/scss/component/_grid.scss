@use 'sass:math';
//
// grid template
//
@mixin grid-columns($bp: null) {
  $infix: if($bp == null, '', '-#{$bp}');

  @for $i from 1 through $grid-cols {
    .grid-row {
      .col#{$infix}-#{$i} {
        grid-column-end: span $i;
      }
      .col-offset#{$infix}-#{$i} {
        grid-column-start: $i + 1;
      }
      .row#{$infix}-#{$i} {
        grid-row-end: span $i;
      }
      .row-offset#{$infix}-#{$i} {
        grid-row-start: $i + 1;
      }
    }
  }
}
.grid-row {
  display: grid;
  grid-template-columns: repeat($grid-cols, 1fr);
  margin-left: calc($grid-gutter / -2);
  margin-right: calc($grid-gutter / -2);
}

.no-gutters {
  margin-right: 0;
  margin-left: 0;
  > .col,
  > [class*='col-'] {
    padding-right: 0;
    padding-left: 0;
  }
}

@include grid-columns;

@each $bp, $width in $grid-breakpoints {
  @media (min-width: $width) {
    @include grid-columns($bp);
  }
}

//
// flex grid
//

// col-lg-*, col-md-*
@mixin flex-columns($breakpoint: null) {
  $infix: if($breakpoint == null, '', '-#{$breakpoint}');

  @for $i from 1 through $grid-cols {
    .col#{$infix}-#{$i} {
      flex-basis: calc(100 / ($grid-cols / $i)) * 1%;
    }
  }
  .col#{$infix}-auto {
    flex: 0 0 auto;
    width: auto;
    max-width: none;
  }
}

.row {
  display: flex;
  flex: 0 1 auto;
  flex-wrap: wrap;
  margin-left: calc($grid-gutter / -2);
  margin-right: calc($grid-gutter / -2);

  @include flex-columns;
}
.col,
[class^='col-'] {
  flex: 0 1 auto;
  box-sizing: border-box;
  padding-left: calc($grid-gutter / 2);
  padding-right: calc($grid-gutter / 2);
}

// col-*
@each $breakpoint, $width in $grid-breakpoints {
  @media (min-width: $width) {
    @include flex-columns($breakpoint);
  }
}
