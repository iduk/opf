.stage {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  min-height: 70vh;
  padding-top: 4vh;
  padding-bottom: 4vh;

  &__links {
    font-size: calc(1vw + 3.5vh);
    line-height: 1.1;
    text-transform: uppercase;
    font-weight: bold;

    > a {
      display: inline-block;
      &::after {
        content: '↖︎';
        vertical-align: top;
        font-size: inherit;
        font-weight: 100;
      }
    }
  }
}

:root {
  --g-color: var(--primary);
  --g-width: 1px;
}
// Outline grid
@mixin gridLine($data: true) {
  @if $data {
    & {
      gap: calc(var(--g-width) / 2);

      > [class*='col-'] {
        outline: var(--g-width) solid var(--g-color);
        padding: calc($grid-gutter / 2);
        box-sizing: border-box;
      }
    }
  }
}

[data-line] {
  @include gridLine($data: true);
}

.section {
  border-top: var(--g-width) solid var(--g-color);
  border-bottom: var(--g-width) solid var(--g-color);

  .work-title {
    writing-mode: vertical-rl;
    text-orientation: mixed;
    transform: rotate(180deg);
    width: 100%;
    inline-size: fit-content;
    display: flex;
    flex-direction: column;
    justify-content: center;
    overflow: hidden;
    text-align: right;

    h1 {
      font-size: 2vh;
      line-height: 1;
    }
    p {
      font-size: 1vh;
    }
  }
}

// test
section.work {
  display: grid;
  grid-template-columns: clamp(48px, 5vw, 8vw) 30% auto;
  grid-template-rows: auto;
  gap: 1px;

  @include breakpoint-up(md) {
    grid-template-areas:
      'hdr art1 art2'
      'hdr art1 art2';
  }
  @include breakpoint-up(xs) {
    grid-template-areas:
      'hdr art1 art1'
      'hdr art2 art2';
  }

  > * {
    outline: 1px solid var(--g-color);
    padding: 1rem;
  }

  .hdr {
    grid-area: hdr;
    // height: fit-content;
    padding-left: 0;
    padding-right: 0;
  }
  .art1 {
    grid-area: art1;
    min-height: 16vh;
  }
  .art2 {
    grid-area: art2;
    position: sticky;
    top: 0;
    left: 0;
    right: 0;
  }
}
